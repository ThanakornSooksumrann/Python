# -*- coding: utf-8 -*-
"""grocery-apriori.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w6_4aPEtiD7lXLpUK-1D4SSyfX3Pl7DM

# Business Problem

# Association Rules

It is a rule-based machine learning technique used to find patterns (relationships, structures) in the data.

Association analysis applications are among the most common applications in data science. It will also coincide as referral systems.

These applications may have come up in the following ways, such as "the person who bought that product also bought this product", "those who viewed that ad also looked at these ads", or "the next video recommended for you".

These scenarios are the most frequently encountered scenarios within the scope of e-commerce data science data mining studies.


# Apriori Algoritması

It is the most used method in this field.

Association rule analysis is carried out by examining some metrics:
X: product
Y: product
N: total trade

*Support: It gives the fraction of transactions which contains product X and Y. Basically Support tells us about the frequently bought products or the combination of products bought frequently.
Support(X, Y) = Freq(X,Y)/N

*Confidence: It tells us how often the products X and Y occur together, given the number times X occurs.
Confidence(X, Y) = Freq(X,Y) / Freq(X)

*Lift: Lift indicates the strength of a rule over the random occurrence of A and B. It basically tells us the strength of any rule.
Lift = Support (X, Y)/( Support(X) * Support(Y) )

## 1. Understanding the Data
"""

#!pip install mlxtend

import pandas as pd
import numpy as np

#df = pd.read_csv('../input/GroceryStoreDataSet.csv', names=['products'], header=None)
#df
import os # use commandline  
from google.colab import files
import io
uploaded = files.upload()
data = pd.read_csv(io.BytesIO(uploaded['GroceryStoreDataSet.csv']) , names=['products'], header=None)

df.values

df.shape

"""## 2. Data Preparation¶

I will use the Apriori algorithm to perform an association analysis.

The apriori method of the mlxtend library accepts the dataset as a True-False dataframe. I will use the data conversion methods of the mlxtend library again to convert the data. Therefore, I will convert the raw data set to the format that these methods will require.
"""

# Step1: I converted the data into list format. I separated the objects in each line with ','.

data = list(df["products"].apply(lambda x : x.split(',')))
data

pip install mlxtend

# Step2: I will apply the method of converting the data of mlxtend library into True-False
# dataframe.
# First, I install the mlxtend library for those who do not have it installed.

from mlxtend.preprocessing import TransactionEncoder
te = TransactionEncoder()
te_data = te.fit(data).transform(data)
df = pd.DataFrame(te_data,columns=te.columns_)
df

"""## 3. Implementing Apriori Algorithm

In the output of the Apriori algorithm, we get the frequencies of each combination in the whole data set. For example, in the output below, only the frequency (frequency) of "BISCUIT" in the whole dataset is 0.35, while the frequency (frequency) of "BISCUIT and BREAD" in the whole dataset is 0.20.

The apriori algorithm was given a min_support value of 0.2. Thus, product associations that are below 0.2 support value in combinations have been eliminated. If the verbose argument is 1, it will tell us how many combinations there are. In our example, 42 combinations were formed. In the last case, we have 16 combinations. Thus, our combination of 42-16 = 26 remained below the value of 0.2 support and was considered as an insignificant rate that we would not add to our comments.
"""

from mlxtend.frequent_patterns import apriori
freq_items = apriori(df,min_support=0.20,use_colnames = True, verbose = 1)
freq_items

"""## 4. Birliktelik Analizi Uygulama

I will apply the association analysis to the combination of mlxtend's association_rules method and the data set that we have support values. I will interpret my latest output according to the values of "support" and "confidence" and suggest a sample action idea.

Interpretation of Sample Association Analysis Output:

The probability of BISCUIT and BREAD being seen together is 20% since support = 0.20.
When BISCUIT is taken, the probability of getting BREAD is around 57% since confidence = 0.571429.

By giving "min_threshold = 0.3", it is ensured that the values with "confidence" value below 0.3 are not brought.
"""

from mlxtend.frequent_patterns import association_rules
df_res = association_rules(freq_items, metric = "confidence", min_threshold = 0.3)
df_res

"""## 5. Preparation for Data Filtering

In this section, taking the lowest and highest confidence values, these values will be used in data filtering and the idea of action will be proposed.

Let's find the highest confidence value. The output shows that the highest confidence value is 0.80.
"""

conf_max = df_res['confidence'].max()
conf_max

"""Let's find the lowest confidence value. The output shows that the lowest confidence value is 0.307."""

conf_min = df_res["confidence"].min()
conf_min

"""## 6. Data Filtering

Data with the lowest, highest and 0.5 confidence value are filtered. It is ranked in ascending order according to "confidence" value.
"""

df_filt = df_res[ (df_res["confidence"] == conf_min) | (df_res["confidence"] == conf_max) | (df_res["confidence"] == 0.5 )]
df_filt.sort_values("confidence", ascending = True)

"""# Comments and Action Advice

Based on the above output;

Line 1:
a). The probability of taking Bread and Biscuits together is 20% as support = 0.2.
b). The probability of getting Biscuits when buying bread is 30% since confidence = 0.307692.
c). The probability of taking the biscuit alone is 35%, since the consequent support = 0.35.

Line 5:
a). The probability of taking coffee and cereal together is 20% as support = 0.2.
b). The probability of taking Cereal when taking coffee is 50% since confidence = 0.5.

Line 7:
a). The probability of taking milk and bread together is 20% since support = 0.2.
b). When milk is taken, the probability of taking Bread is 80% since confidence = 0.8.

Comments :
30% of customers who buy bread also get Biscuits. Cereal was also bought in half of the coffee sales. Milk and Bread were taken together in 20% of all purchases.

Action Proposal:
Customers who buy milk are quite likely to buy bread (80%). This means; customers who buy milk also buy bread, and will likely keep their way to the bread aisle after receiving milk. Milk and bread departments can be located in distant locations within the market, and many departments may be required to pass through the bread department of the customer who purchases milk. Thus, the possibility of purchasing any product during the customer's journey can be increased.

Customers who buy bread seem a bit less likely to buy biscuits (30%). The probability of taking the biscuit alone seems to be low (35%). To increase the sale of biscuits, a biscuit stand can be placed right next to the bread shelf and the ones with cheap prices are placed in the foreground, and the price can be drawn with a dark label to attract the attention of the customer.
"""