# -*- coding: utf-8 -*-
"""Project_Model_bird_51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17b7Htr6d0VwNdGQxFl9Evlv_F8oCPL3I
"""

!pip install tensorflow
!pip install keras
!pip install h5py pyyaml

from google.colab import drive
drive.mount('/content/gdrive', force_remount=False)

import os
os.chdir("/content/gdrive/")
os.getcwd()

drive.mount('/content/drive')

import pandas as pd
path = "/content/drive/MyDrive/Colab Notebooks/bird3"
files = os.listdir(path)
categories = []

for filename in files:
    category = filename.split('_')[0]
    if '1' in category:
        categories.append("0")
    elif '2' in category:
        categories.append("1")
    elif '3' in category:
        categories.append("2")
    elif '4' in category:
        categories.append("3")
    elif '5' in category:
        categories.append("4")
    elif '6' in category:
        categories.append("5")
    elif '7' in category:
        categories.append("6")
    elif '8' in category:
        categories.append("7")
    elif '9' in category:
        categories.append("8")
    elif '10' in category:
        categories.append("9")
    elif '11' in category:
        categories.append("10")
    elif '12' in category:
        categories.append("11")
    elif '13' in category:
        categories.append("12")
    elif '14' in category:
        categories.append("13")
    elif '15' in category:
        categories.append("14")
    elif '16' in category:
        categories.append("15")
    elif '17' in category:
        categories.append("16")
    elif '18' in category:
        categories.append("17")
    elif '19' in category:
        categories.append("18")
    elif '20' in category:
        categories.append("19")
    elif '21' in category:
        categories.append("20")
    elif '22' in category:
        categories.append("21")
    elif '23' in category:
        categories.append("22")
    elif '24' in category:
        categories.append("23")
    elif '25' in category:
        categories.append("24")
    elif '26' in category:
        categories.append("25")
    elif '27' in category:
        categories.append("26")
    elif '28' in category:
        categories.append("27")
    elif '29' in category:
        categories.append("28")
    elif '30' in category:
        categories.append("29")
    elif '31' in category:
        categories.append("30")
    elif '32' in category:
        categories.append("31")
    elif '33' in category:
        categories.append("32")
    elif '34' in category:
        categories.append("33")
    elif '35' in category:
        categories.append("34")
    elif '36' in category:
        categories.append("35")
    elif '37' in category:
        categories.append("36")
    elif '38' in category:
        categories.append("37")
    elif '39' in category:
        categories.append("38")
    elif '40' in category:
        categories.append("39")
    elif '41' in category:
        categories.append("40")
    elif '42' in category:
        categories.append("41")
    elif '43' in category:
        categories.append("42")
    elif '44' in category:
        categories.append("43")
    elif '45' in category:
        categories.append("44")
    elif '46' in category:
        categories.append("45")
    elif '47' in category:
        categories.append("46")
    elif '48' in category:
        categories.append("47")
    elif '49' in category:
        categories.append("48")
    elif '50' in category:
        categories.append("49")
    elif '51' in category:
        categories.append("50")
    else: pass
df = pd.DataFrame({
    'filename': files,
    'category': categories
})

df

import numpy as np
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

path = "/content/drive/MyDrive/Colab Notebooks/bird3"
files = os.listdir(path)

X =  np.empty([0])
y = np.empty([0])
for filename in files:
    print(path+"/"+filename)
    # load the image
    img = load_img(path+"/"+filename)

    print(img.size)
    img.show()


    # convert to numpy array
    img_array = img_to_array(img)
   
    X = np.append (X,img_array)
    category = filename.split('_')[0]
    if '1' == category:
        y = np.append(y,[0])
    elif '2' == category:
        y = np.append(y,[1])
    elif '3' == category:
        y = np.append(y,[2])
    elif '4' == category:
        y = np.append(y,[3])
    elif '5' == category:
        y = np.append(y,[4])
    elif '6' == category:
        y = np.append(y,[5])
    elif '7' == category:
        y = np.append(y,[6])
    elif '8' == category:
        y = np.append(y,[7])
    elif '9' == category:
        y = np.append(y,[8])
    elif '10' == category:
        y = np.append(y,[9])
    elif '11' == category:
        y = np.append(y,[10])
    elif '12' == category:
        y = np.append(y,[11])
    elif '13' == category:
        y = np.append(y,[12])
    elif '14' == category:
        y = np.append(y,[13])
    elif '15' == category:
        y = np.append(y,[14])
    elif '16' == category:
        y = np.append(y,[15])
    elif '17' == category:
        y = np.append(y,[16])
    elif '18' == category:
        y = np.append(y,[17])
    elif '19' == category:
        y = np.append(y,[18])
    elif '20' == category:
        y = np.append(y,[19])
    elif '21' == category:
        y = np.append(y,[20])
    elif '22' == category:
        y = np.append(y,[21])
    elif '23' == category:
        y = np.append(y,[22])
    elif '24' == category:
        y = np.append(y,[23])
    elif '25' == category:
        y = np.append(y,[24])
    elif '26' == category:
        y = np.append(y,[25])
    elif '27' == category:
        y = np.append(y,[26])
    elif '28' == category:
        y = np.append(y,[27])
    elif '29' == category:
        y = np.append(y,[28])
    elif '30' == category:
        y = np.append(y,[29])
    elif '31' == category:
        y = np.append(y,[30])
    elif '32' == category:
        y = np.append(y,[31])
    elif '33' == category:
        y = np.append(y,[32])
    elif '34' == category:
        y = np.append(y,[33])
    elif '35' == category:
        y = np.append(y,[34])
    elif '36' == category:
        y = np.append(y,[35])
    elif '37' == category:
        y = np.append(y,[36])
    elif '38' == category:
        y = np.append(y,[37])
    elif '39' == category:
        y = np.append(y,[38])
    elif '40' == category:
        y = np.append(y,[39])
    elif '41' == category:
        y = np.append(y,[40])
    elif '42' == category:
        y = np.append(y,[41])
    elif '43' == category:
        y = np.append(y,[42])
    elif '44' == category:
        y = np.append(y,[43])
    elif '45' == category:
        y = np.append(y,[44])
    elif '46' == category:
        y = np.append(y,[45])
    elif '47' == category:
        y = np.append(y,[46])
    elif '48' == category:
        y = np.append(y,[47])
    elif '49' == category:
        y = np.append(y,[48])
    elif '50' == category:
        y = np.append(y,[49])
    elif '51' == category:
        y = np.append(y,[50])
    else: pass

from sklearn.model_selection import train_test_split
X = X.reshape(len(y),224,224,3)
x_vector = 224*224*3
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.07, random_state=1000)

#เปลี่ยนมิติข้อมูลให้เป็น 4 มิติ คือ (จำนวนรายการ, Column, Row, จำนวน Layer สี) โดยข้อมูล 224 x 224 ดังนั้นมิติคือ (จำนวนรายการ, 28, 28, 3)
X_train = X_train.reshape(X_train.shape[0], 224, 224, 3)
X_test = X_test.reshape(X_test.shape[0], 224, 224, 3)

#กำหนดตัวแปรมิติข้อมูล เพื่อเตรียมใช้ใน Argument input_shape ใน Layer แรกของ Model โดยไม่ต้องระบุจำนวนรายการ 
#ดังนั้น มิติข้อมูลสำหรับ Layer แรก คือ (224, 224, 3) อนึ่งเราต้องกำหนดมิติข้อมูลสำหรับ Layer แรกเท่านั้น ส่วน Layer อื่น TensorFlow จะอนุมานให้เอง
input_shape = (224, 224, 3)

#แปลง Data type ของข้อมูลให้เป็น Float เพื่อให้ Algorithm สามารถคำนวนและแสดงผลเป็นค่าทศนิยมได้
X_train = X_train[:, :, :, :].astype('float32')
X_test = X_test[:, :, :, :].astype('float32')
y_train = y_train[:]
y_test = y_test[:]

#Scale ข้อมูลโดยใช้วิธี Normalise ซึ่งก็คือการหารข้อมูลทุกรายการด้วย Range ของค่าความสว่างของแต่ละ Pixel นั่นก็คือ 255
X_train /= 255
X_test /= 255

print('X_train shape:', X_train.shape)
print('X_test shape:', X_test.shape)
print('y_train shape:', y_train.shape)
print('y_test shape:', y_test.shape)

import matplotlib.pyplot as plt
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(X_train[i], cmap=plt.cm.binary)
    plt.xlabel(y_train[i])
plt.show()

from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.utils import np_utils 
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, Flatten
from keras.layers import BatchNormalization
import tensorflow as tf

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(224, 224, 3)))
model.add(BatchNormalization())
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.3))

model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.4))

model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform')) #Fully conneccted
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(51, activation='softmax'))

model.summary()

model.compile(optimizer='adam',  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  metrics=['accuracy'])

history = model.fit(X_train, y_train, batch_size=35, epochs=20,validation_data = (X_test,y_test),callbacks =None)

score = model.evaluate(X_train, y_train, verbose = 0)
print('Train loss : ', score[0])
print('Train accuracy : ', score[1])
print("")
score = model.evaluate(X_test, y_test, verbose = 0)
print('Test loss : ', score[0])
print('Test accuracy : ', score[1])

plt.rcParams['figure.figsize'] = (6,6)
plt.plot(history.history['accuracy']) #train
plt.plot(history.history['val_accuracy']) #test
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc = 'upper left')
print(history.history.keys())

plt.show()

model.predict(X_test[2].reshape(1,224,224,3)).argmax()

from __future__ import absolute_import, division, print_function
import os
import tensorflow as tf
from tensorflow import keras
tf.__version__

def create_model():
  model = tf.keras.model = Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(224, 224, 3)),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Dropout(0.2),

    keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Dropout(0.3),

    keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Dropout(0.4),
    
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu', kernel_initializer='he_uniform'),
    keras.layers.BatchNormalization(),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(51, activation='softmax')
  ])
  model.compile(optimizer='adam',  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  metrics=['accuracy'])
  return model
model = create_model()
model.summary()

# Create and train a new model instance.
model = create_model()
model.fit(X_train, y_train, epochs=6)

# Save the entire model to a HDF5 file.
# The '.h5' extension indicates that the model should be saved to HDF5.
model.save('/content/drive/MyDrive/Colab Notebooks/my_model.h5')

# Recreate the exact same model, including its weights and the optimizer
new_model = tf.keras.models.load_model('/content/drive/MyDrive/Colab Notebooks/my_model.h5')

# Show the model architecture
new_model.summary()

loss, acc = new_model.evaluate(X_test, y_test, verbose=2)
print('Restored model, accuracy: {:5.2f}%'.format(100 * acc))

print(new_model.predict(X_test).shape)