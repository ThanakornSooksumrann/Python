# -*- coding: utf-8 -*-
"""AI_pima_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/170KFlh6wtj2pN696nJK8vx74bnHGv0G-
"""

import numpy as np
import pandas as pd

#dataset = pd.read_csv('pima.csv') #สำหรับเขียนโปรแกรมตัวอื่นที่ไม่ใช่ cloud ก็คือเรียกในเครื่องได้เลย
import io
from google.colab import files

uploaded = files.upload()
dataset = pd.read_csv(io.BytesIO(uploaded['pima.csv']))

dataset.head(10)

dataset.tail(5)

dataset.shape

dataset.describe()

"""** 1. Pandas iloc data selection** see detail at link text"""

X = dataset.iloc[:, 0:8]#[row,colum] : คือ เอาทุกตัว row หมด colum 0-7
Y = dataset.iloc[:, 8] # row ทุกแถว colum ที่ 8

X.head(2)

Y.head(10)

from sklearn.preprocessing import StandardScaler #แปลงข้อข้มูลมู (transform data)

sc = StandardScaler()
X = sc.fit_transform(X)

print(X)

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0) # 100% คือ 1.0

print(X_train)

print(Y_train)

!pip install keras

!pip install tensorflow

from keras import Sequential
from keras.layers import Dense

classifier = Sequential() #การเชื่อมต่อ
#Dense คือ fully connected มีเส้นเชื่อมต่อถึงกันหมดทุกโหนด และมีหลายแบบ เช่น sigmoi
#First Hidden Layer
classifier.add(Dense(4, activation='relu', kernel_initializer='random_normal', input_dim=8)) # 8 หมายถึง feature ที่อยู่ใน X และ 4 ก็คือ มี 4 โหนด
                     
#Second Hidden Layer
classifier.add(Dense(4, activation='relu', kernel_initializer='random_normal'))
 
#Output Layer
classifier.add(Dense(1, activation='sigmoid', kernel_initializer='random_normal'))
#output = activation(dot(input, kernel) + bias)

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # loss คือ คำเฉลย metrics ใช้อะไรในการวัด optimizer อะไร

#Fitting the data to training dataset    #accuracy: 0.6387 ยิ่งเยอะยิ่งดี val_loss: 0.6848 ยิ่งน้อยยิ่งดีเพราะมันคือความผิดพลาด
#classifier.fit(X_train, Y_train, batch_size=10, epochs=100) 537*100 เพราะชุดเทรนมันมี 537 ละ Epochs มัน 100 จึงต้องคูณ
history = classifier.fit(X_train, Y_train, batch_size=10, epochs=100, validation_data=(X_test, Y_test))

#eval_model = classifier.evaluate(X_train, Y_train)
#print(eval_model) # ชุด train
score = classifier.evaluate(X_train, Y_train, verbose = 0)
print('Test loss : ', score[0])
print('Test accuracy : ', score[1])

#ชุด test
score = classifier.evaluate(X_test, Y_test, verbose = 0)
print('Test loss : ', score[0])
print('Test accuracy : ', score[1])

import matplotlib.pyplot as plt # For graphical representation

plt.plot(history.history['accuracy']) #train
plt.plot(history.history['val_accuracy']) #test
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc = 'upper left')
print(history.history.keys())

plt.show()

classifier.save("pima_model.h5")
print("Saved model.")

Y_pred = classifier.predict(X_test)
Y_pred = (Y_pred > 0.5) # ก็คือความถูกต้องมี 0-1 เราเลย เลือกมากกว่า 0.5 จะเก็บไว้ใน Y_pred เอาชุดที่มันมั่นใจจริง ๆ



from sklearn.metrics import confusion_matrix # คือตารางวันความสามารถ
cm = confusion_matrix(Y_test, Y_pred)

print(cm)

from numpy import loadtxt
from keras.models import load_model

#load model
model = load_model('pima_model.h5')

#summarize model
model.summary()

uploaded = files.upload()
udata = pd.read_csv(io.BytesIO(uploaded['my_pima_unseen.csv']))
X_new = udata.iloc[:, 0:8]
Y_new = model.predict(X_new)
Y_new = np.argmax(Y_new, axis = 1)
yacc = model.predict(X_new)

for i in range(len(Y_new)):
  print("The label of unsenn data is ", Y_new[i], '\t', yacc[i])