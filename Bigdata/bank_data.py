# -*- coding: utf-8 -*-
"""ิbank-data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16z8GUy3VMkRM7mmin3EeGE_VLlCR1LkQ
"""

import numpy as np
import pandas as pd

import io 
from google.colab import files
uploaded = files.upload()
bank = pd.read_csv(io.BytesIO(uploaded['bank-data.csv']))

bank.drop(['id'], axis=1, inplace=True) #ลบคอลัมน์ axis=1 คือ แนวตั้ง || axis=0 คือ แนวนอน
#dataframe = dataframe.drop(5, axis=0) #ลบคอลัมน์
#dataframe.reset_index(drop=True)

bank.head(10)

from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
label_encoder = LabelEncoder()

for c in bank:
  if(bank.dtypes[c] == object and c != "pep"): #เช็คว่า อันไหนเป็น oject ถ้าเป็น oject เอาเข้าไปแปลงเป็น int และหยุดที่ colum "pep"
    bank[c] = label_encoder.fit_transform(bank[c])

bank.head(10)

import seaborn as sns
sns.set(style="ticks")
sns.set_palette("husl")
sns.pairplot(bank.iloc[:,1:11],hue="pep")

#shape of datasets 
print ("Dataset Shape: ", bank.shape) 
bank.describe()

bank.info()

bank.groupby('pep').size()

import matplotlib.pyplot as plt
sns.set_style('whitegrid')
g = sns.FacetGrid(bank, hue = 'pep', size = 7)
g.map(plt.scatter,'income','age')
g.add_legend()
plt.show()

X = bank.iloc[:, 0:10].values #ข้างหน้า Row n:n-1 | ข้างหลัง Colum n:n-1 หรือ ใส่จำนวนโดยไม่ต้องมี ":"
y = bank.iloc[:, 10].values

# Import Library for splitting data
from collections import Counter
from sklearn.model_selection import train_test_split
# Creating Train and Test datasets
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 50, test_size = 0.25)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
print(Counter(y_train))
print(Counter(y_test))

#use Entropy
clf = DecisionTreeClassifier(criterion='entropy',max_depth=5) #set max_depth = 3
clf.fit(X_train,y_train)

# Predict Accuracy Score
y_pred = clf.predict(X_test)
print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred=clf.predict(X_train)))
print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=y_pred))

#Measures of the predicted values
print(classification_report(y_test,y_pred))

#show confusion matrix 
from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(y_test,y_pred))

# Generating the decision tree graph
from sklearn import tree
tree.plot_tree(clf)

#Convert decision Tree to Dot file
#export_graphviz function converts decision tree classifier into dot file 
#pydotplus convert this dot file to png or displayable form on Jupyter.
from six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
feature_cols = ['age',	'sex',	'region',	'income',	'married',	'children',	'car',	'save_act',	'current_act',	'mortgage']
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['YES','NO'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('bank-data.png')
Image(graph.create_png())
#Values are number of instances per class.

#the tree can also be exported in textual format with the function export_text.
from sklearn.tree import export_text
clf = DecisionTreeClassifier(random_state=0)
decision_tree = clf.fit(X_train,y_train)
rules = export_text(decision_tree, feature_names=feature_cols)
print(rules)

# prediction on X_test (testing data ) in order to compare actual target with 38 instancs
Y_pred=clf.predict(X_test)
print(Y_pred)

# prediction on unseen data
#two unseen data
#1.อายุ 2.เพศ 3.ภูมิภาค 4.รายได้ 5.แต่งงานยัง 6.ลูก 7.รถ 8.save_car 9.current_act	10.mortgage
X=[[20.0, 2.0, 1.5, 800, 6.5, 4.6, 7.5, 7.8, 5.9, 8.1],
      [85.0, 1.0,8.0, 752000.0, 1.0, 6.0, 0.0, 0.0, 0.0, 88.0],
      [13.0, 0.0, 6.0, 4000.3, 2.5, 1.0, 3.5, 1.8, 1.0, 0.0]]
Y_pred=clf.predict(X)
print(Y_pred)