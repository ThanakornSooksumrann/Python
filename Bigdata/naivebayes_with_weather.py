# -*- coding: utf-8 -*-
"""Naivebayes with weather.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f3IVI6vZRwpt8FeX32v5cYxmxbaR23ek

# Naive Bayes Classifier
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os # use commandline  
from google.colab import files
import io
uploaded = files.upload()
data  = pd.read_csv(io.BytesIO(uploaded['weather.csv']))

data.info()

data.columns

data.head(14)

X_train = pd.DataFrame(data[['outlook', 'temperature', 'humidity', 'windy']])
y_train = pd.DataFrame(data['class'])

X_train

from sklearn.preprocessing import LabelEncoder
X_train = X_train.apply(LabelEncoder().fit_transform)

X_train

print(X_train.info())
print(X_train.head())

print(y_train)

from sklearn.model_selection import train_test_split
# Creating Train and Test datasets
X_train, X_test, y_train, y_test = train_test_split(X_train,y_train, random_state = 54, test_size = 0.33)

X_test

#Import Library of Gaussian Naive Bayes model
from sklearn.naive_bayes import GaussianNB #the best
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import BernoulliNB

#Create a Gaussian Classifier
model = GaussianNB()
#clf1 = MultinomialNB()
#clf2 = BernoulliNB()
# Train the model using the training sets 
model.fit(X_train, y_train)
#clf1.fit(X_train, y_train)
#clf2.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred= model.predict(X_train)))
print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=model.predict(X_test)))

#Predict Output
predicted= model.predict([[0,1,0,0]] ) 
print(predicted)

"""# How to improve classification performance?
**using Encoder**
"""

X_train = pd.DataFrame(data[['outlook', 'temperature', 'humidity', 'windy']])
y_train = pd.DataFrame(data['class'])

features = data.columns.tolist()
features.remove('class')
features

from sklearn.preprocessing import OrdinalEncoder, LabelEncoder
encoder = OrdinalEncoder()
X_train_encoded = encoder.fit_transform(X_train)
data_encoded = pd.DataFrame(X_train_encoded, columns=features)
X_train_encoded

encoder = LabelEncoder()
target_encoded = encoder.fit_transform(y_train)
y_train_encoded = target_encoded
encoder.inverse_transform(y_train_encoded)

y_train_encoded

from sklearn.model_selection import train_test_split
# Creating Train and Test datasets
X_train, X_test, y_train, y_test = train_test_split(X_train_encoded,y_train_encoded, random_state = 54, test_size = 0.33)

#Create a Gaussian Classifier
model = GaussianNB()
# Train the model using the training sets 
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred= model.predict(X_train)))
print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=model.predict(X_test)))

"""# แบบฝึกหัด
ให้นักศึกษาจำแนกข้อมูลด้วยอัลกอริทึม NaiveBayes กับชุดข้อมูล Car  ให้มีค่า Accuracy สูงที่สุดเท่าที่จะทำได้ (> 80.00)
"""

import os # use commandline  
import pandas as pd
from google.colab import files
import io
uploaded = files.upload()
data  = pd.read_csv(io.BytesIO(uploaded['car.csv']))

data.head()

data.describe()