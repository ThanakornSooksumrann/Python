# -*- coding: utf-8 -*-
"""Churn_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHY2ldPjPG0v-p31tInHf65XGmLqBCp6
"""

!pip install keras

!pip install tensorflow

from keras import Sequential
from keras.layers import Dense

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import io
from google.colab import files
uploaded = files.upload()
dataset= pd.read_csv(io.BytesIO(uploaded['churn.csv']))

dataset.tail(5)

dataTypeSeries = dataset.dtypes #ดู type ของข้อมูล
dataTypeSeries

"""# Encoding categorical data…

Now we encode the string values in the features to numerical values as a ML Algorithm can only work on numbers and not on string values.
There are many values which need to converted into numerical data
ตอนนี้เราเข้ารหัสค่าสตริงในคุณสมบัติเป็นค่าตัวเลข เนื่องจาก ML Algorithm ทำงานได้เฉพาะกับตัวเลขเท่านั้น ไม่สามารถใช้กับค่าสตริงได้ มีค่ามากมายที่ต้องแปลงเป็นข้อมูลตัวเลข โค้ดโค้ด ข้อความ
"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

dataset = dataset.apply(LabelEncoder().fit_transform) #เป็นการ convert ทุก attribute 
dataset

X = dataset.iloc[:, 1:20].values

X

y = dataset.iloc[:, 20].values

y

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X  = scaler.fit_transform(X)

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(19, input_dim=19, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

#classifier.compile(Adam(lr=0.04),'binary_crossentropy',metrics=['accuracy'])

model.summary()

history = model.fit(X_train, y_train,validation_data = (X_test,y_test), epochs=100, batch_size=64)

eval_model=model.evaluate(X_train, y_train)
eval_model

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

y_pred = model.predict(X_test)
#classes_x = y_pred.argmax(axis=-1)   #softmax
y_pred = (y_pred> 0.5).astype("int32") #sigmoid

y_test

y_pred

from sklearn.metrics import confusion_matrix, accuracy_score
confusion_matrix(y_test, y_pred)

accuracy_score(y_test, y_pred)