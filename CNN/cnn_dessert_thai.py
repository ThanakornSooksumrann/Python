# -*- coding: utf-8 -*-
"""CNN_Dessert_Thai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lw2T_66hXpkPj8UZEeHZeb1l2TQ4Erif
"""

import numpy as np
import io
import pandas as pd
import matplotlib as pl
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt  
import random

from keras.models import Sequential

from keras.layers.core import Dense, Dropout, Activation
from keras.utils import np_utils 

from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, Flatten

from keras.layers.normalization import layer_normalization
from keras.layers import BatchNormalization
import tensorflow as tf

from google.colab import drive
drive.mount('/content/gdrive', force_remount=False)

import os
os.chdir("/content/gdrive/")
os.getcwd()

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Colab Notebooks/AI/img_dessert"
files = os.listdir(path)
categories = []

for filename in files:
    category = filename.split('.')[0]
    if 'go' in category:
        categories.append("1")
    elif 'EGG' in category:
        categories.append("0")
    else: pass
df = pd.DataFrame({
    'filename': files,
    'category': categories
})

print(df)

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

path = "/content/drive/MyDrive/Colab Notebooks/AI/img_dessert"
files = os.listdir(path)

X =  np.empty([0])
y = np.empty([0])
for filename in files:
    print(path+"/"+filename)
    # load the image
    img = load_img(path+"/"+filename)

    print(img.size)
    img.show()


    # convert to numpy array
    img_array = img_to_array(img)
   
    X = np.append (X,img_array)
    category = filename.split('.')[0]
    if 'go' in category:
        y = np.append(y,[1])
    elif 'EGG' in category:
        y = np.append(y,[0])
    else: pass

print(X)

X = X.reshape(len(y),120,120,3)
x_vector = 120*120*3

X

print(X.shape)
print(y.shape)
print(type(X))
print(type(y))

plt.rcParams['figure.figsize'] = (20,20) 

for i in range(55):
    plt.subplot(10,10,i+1)
    img_array = X[i]
    plt.imshow(np.uint8(img_array))
    plt.title("Class {}".format(y[i]))
    
plt.tight_layout()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1000)

print("X_train shape", X_train.shape)
print("y_train shape", y_train.shape)
print("X_test shape", X_test.shape)
print("y_test shape", y_test.shape)

print(type(X_train))
print(type(y_train))

len_train  = len(X_train) #11
len_test = len(X_test) #5

plt.rcParams['figure.figsize'] = (9,9) # change figure size to plot graph

for i in range(5):
    plt.subplot(3,2,i+1)
    img_array = X_test[i]
    plt.imshow(np.uint8(img_array))
    plt.title("Class {}".format(y_test[i]))
    
plt.tight_layout()

X_train = X_train.reshape(len_train, x_vector) #ทำการ Fletten แต่ทำเอง x_vector 120*120*3
X_test = X_test.reshape(len_test, x_vector)   #ทำการ Fletten แต่ทำเอง x_vector 120*120*3

X_train = X_train.astype('float32')   # change integers to 32-bit floating point numbers
X_test = X_test.astype('float32')

X_train /= 255                    
X_test /= 255  # it is good practice to normalize the pixel values so that each pixel value has a value between 0 and 1

print("Training matrix shape", X_train.shape)
print("Testing matrix shape", X_test.shape)

nb_classes = 2 # number of unique digits

Y_train = np_utils.to_categorical(y_train, nb_classes) #Converts a class vector (integers) to binary class matrix.
Y_test = np_utils.to_categorical(y_test, nb_classes) #แปลงให้มันเป็นประเภท
print("y_train shape", y_train.shape)
print("y_test shape", y_test.shape)

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(120, 120, 3)))
model.add(BatchNormalization())
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

model.compile(optimizer='adam',  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  metrics=['accuracy'])

history = model.fit(Y_train, Y_train, batch_size=30, epochs=17,validation_data = (X_test,X_test),callbacks =None)

print(history.history.keys())
plt.figure(figsize=(9,6))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc = 'upper left')
plt.show()

score = model.evaluate(X_train, Y_train, verbose = 0)
print('Train loss : ', score[0])
print('Train accuracy : ', score[1])

score1 = model.evaluate(X_test, Y_test, verbose = 0)
print('Test loss : ', score1[0])
print('Test accuracy : ', score1[1])

import keras
print(keras.backend.backend()) 
import tensorflow as tf
print(tf.__version__)

tf.keras.Sequential([model,tf.keras.layers.Softmax()])
result = model.predict(X_test)
for i in range(5):
  print(np.argmax(result[i]))

plt.rcParams['figure.figsize'] = (9,9) # change figure size to plot graph

for i in range(5):
    plt.subplot(2,3,i+1)
    plt.imshow(X_test[i].reshape(120,120,3))
    plt.title("Class {}".format(y_test[i]))  
plt.tight_layout()

from keras.preprocessing.image import array_to_img
image_show = array_to_img(X_test[1].reshape(120,120,3))
image_show

print(np.argmax(result[1]))